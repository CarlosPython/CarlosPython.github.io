<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[亚马逊运营不同阶段的书单]]></title>
    <url>%2F2019%2F05%2F23%2F%E4%BA%9A%E9%A9%AC%E9%80%8A%E8%BF%90%E8%90%A5%E4%B8%8D%E5%90%8C%E9%98%B6%E6%AE%B5%E7%9A%84%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[今天分五个阶段，剖析一下，作为一名亚马逊运营应该如何通过阅读，安全的成长和续命。 第一阶段入入门，建立基础认知扫扫盲。1.《亚马逊跨境电商运营宝典》2.《amazon大卖家》 第二阶段找找关键因素，专题提升，提高审美，建立体系，用户行为，品牌管理。1.《论CPC的实战方法》2.《视觉锤》3.《品牌视觉》4.《屏幕上的聪明决策》5.《BD和LD的实战运用》6.《我们的流量》7.《价格游戏》 第三阶段数据化，团队管理。数据化可以多多学习国内电商，然后进行知识迁移。学习BI和python让边界和视野更广，拥抱DT时代。1.《电商数据分析与数据化运营》2.《python编程快速上手》3.《从EXCEL到POWER BI》4.《一个电商运营总监的自白》 第四阶段慢慢你会发现平台变化如抽风，业绩压力似磐石，身体、精神压力，亟需得到调节与修复。此时应该看：1.《颈椎病康复指南》2.《腰椎间盘突出日常护理》3.《心脏病的预防与治疗》4.《高血压降压宝典》5.《强迫症人自我修复》6.《精神病症状学》 第五阶段最后，只用看一本书：《活着》 我比较幸运，记得初三毕业的时候就买了最后这一本，所以相当于打了疫苗，到现在还乐观的“活着”。 博客好久没写了，Markdown语法都要忘光了，后面慢慢捡起来，分享生活分享成长。 哈哈哈，大早上皮一下，好开心。 ENDHAPPY Morning ~]]></content>
      <tags>
        <tag>AMAZON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[亚马逊如何数据化运营]]></title>
    <url>%2F2018%2F12%2F18%2F%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%A6%82%E4%BD%95%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%2F</url>
    <content type="text"><![CDATA[亚马逊一路发展下来，竞争愈加强烈，所需要的资源匹配精力匹配都在呈倍增加，每个平台红利结束后，对应运营理念也需要及时更新升级。当然，这也是必然发展规律。科特勒大师的营销革命都从1.0出版到4.0了，从产品导向、品牌导向、价值导向到现在的价值观与共创导向。连营销理论都迭代了这么多次，何况运营理念。 电商运营遇到的一些问题 平台红利结束后，还处在买流量、打爆款的初始阶段。 平台运营主要靠打折促销来完成业绩 平台运营都是靠经验与电商平台的惯性在工作 部门协作效率低不在一个频道(运营、发货、推广、美工) 或没有协作一个人当所有角色天天游离在琐事之中以上 我都遇到过 怎么解决两个关键词，数据化和品牌化通过数据化工作流程，找到每个重要环节的KPI ，指导运营节奏和决策参考。通过品牌化营销开展，找到运营的方向达成共识，形成视觉锤不断深入消费者心智。完成这两个层面就能形成系统，有什么用呢？就好比我们用的Windows系统，能直接管理电脑硬件与软件资源并提供一个便捷的可操作可视化界面，两个目的：减少不确定性提高稳定性和减少沟通偏差提高易操作性。 今天主要对数据化进行拓展，品牌化后面再单独讲。 运营头脑运营头脑是最重要的，是基础思考能力。需要明白自己需要什么，哪些数据是有价值的。针对电商我们需要建立三个基础思考框架：公式框架： UV X 转化率 X 客单价 = 销售额分类框架：人（流量）货（货物）场（促销、销售）模块框架：运营模块、商品模块、商品模块、市场模块、视觉模块、辅助模块（客服、仓储、财务） 先说第一个公式框架 UV X 转化率 X 客单价 = 销售额，老生常谈。这里要的点是什么呢？完成店铺基础诊断和状态监控通过这四个关键的指标通过横向和纵向对比举个例子： xx 销售额 UV 转化率 客单价 实际 6552000 2340000 0.7% 400 达成率 84% 75% 102% 104% 环比 -20% -23% 8% 5% 通过纵向对比可以看到，UV环比下降了23%，你就会考虑可能的因素：广告投放问题或者是上个月平台有大型活动本月没有还是什么原因？当然你通过这个表是不能直接找到产生的原因的。这里主要解决根据某一指标异常波动来找到销售异常原因，并实时监控到其状态。我们在做月报的时经常会用到这个做法，但这里面的要点就是平时要把握好自身的正常值范围，在出现异常时能第一时间将问题找出来，解决的是一个异常传递效率。再有就是如果有同行的数据还能进行横向空间唯度的对比。 乘积效应建立预测体系这个公式是一个目标纯乘法公式，销售额是前面三个因素的乘积结果，与销售额成正比。当其中的每个因数都有细小变化时，销售额就会产生巨大影响。你可以试试转化率提高万分之一，客单价提高百分之一，销售额提高多少百分比，如果UV再加一点呢会更大。利用这个原理，便可以按各项指标的增长（负增长）趋势，来预测来看的销售额。然后与财务目标和商品推广策略去匹配，但能大致预测销售增长是否符合公司的预期。如果符合，增长点体现在哪些指标？对应的指标是哪个职能在负责有什么举措来确保这些指标增长？如果不符，哪些指标达不到，什么原因，是否合理?当然这些需要丰富的运营经验才能建立起来一个有效的数据预测体系，但这是每个运营需要思考的方向。 再说第二个分类框架人货场人货场其实是传统店铺用的标准，经营都是相通的，电商也是一样通用的，不过是要素要自己注意做好代入。电子商务出现后，算法取代了货架规划图，内容取代了店内购物的实际体验。就算是取代，基本购买流程也是差不多的，只是形式变了。 关于人的KOL指标 人的指标注意两个维度质量和数量。 关于货的KOL指标 货的指标销售与库存注意区分整体与单品，配货注意相关比率。 关于场的KOL指标 注意页面逻辑与品牌的调性。 以上这些指标都是我们需要知道了解的重要指标，要点是找到恰当的指标解决当前的问题，这是内功。那初级运营要做的是至少脑子里有这些数据概念，时间长了就自然有条件反射了。 最后第三个模块框架按照职能模块进行划分，这种我们会比较熟悉好理解，但在实际情况中可能会有一个模块担任多个职能的情况。这里从职能和数据指标两个维度一起来看看，有哪些指标是需要知道的呢？运营模块 职能：达成品牌业绩目标；控制运营成本（销售折损、退货、扣点、物流、推广） 数据指标：业绩达标率、业绩增长率、销售利润额商品模块 职能：商品企划和商品运营 数据指标：库存率、售罄率；周转正确率、新品动销率、活动动销率、销售折损市场模块 职能：市场推广、会员维护、活动包装 数据指标：ROI、付费用户销售额、付费流量转化率、复购率等视觉模块： 职能：店铺视觉、详情页逻辑设计、页面框架设计、活动设计 数据指标：流量漏斗、热力图客服、仓储、财务模块 职能：销售末端支持、咨询、成交引导、售后服务 数据指标：咨询转化率、人效、服务质量（好评数、差评数、投诉率）、日均发货单数、库存准确率、费用处理效率、退款等 以上有很多其它指标很多和人货场逻辑有重复，就不一一列举。到目前为止，我已经从三个方向对重要指标进行了梳理。我们日常运营面临的分析维度很多，流量、商品、主推商品、用户、活动、促销优惠券等等，这样在运营中遇见对应的板块就可以知道从哪些维度进行改善、避免。这属于认知层面。先有认知才有后面的一系列分析并建立数据思维。 数据思维完成了数据认知，通常我们就需要引入筛选后的重要指标并进行一系列分析方法应用，从面辅助认知向解决问题跃迁。这里主要有三个方面：对比细分转化对比： 包括绝对值(正数比较多如销售额、退货额）和相对值（转化率、完成率）对比 环比：环比指统计周期内的数据与上期数据的比较。通常会用如本月与上月进行相对指标对比。 同比：同比指周期内数据与去年同期数据之间的对比。通常会用来年去年同期情况进行预测安排。 横向对比与纵向对比：在空间与时间两个不同维度的对比。横向（空间）如本店与同行店，纵向如（刚才的同比和环比） 份额：属于横向的一种，比如有多个店时计算单个占所有渠道的分。 细分常用于分析对象找到更深层次的问题根源。主要是建立在逻辑链条上找到一个方向，深挖找到重要的指标解决一些问题。比如通过年份和季节的维度对商品进行细分 ，针对服装就能知道有多少货属于库存有多少属于适销品。 转化转化分析一般是选用漏斗模型。从浏览到完成交易中间环节的流量损失率，就能画出一个漏斗图，在对应节点找重要指标进行分析。 工具完成了数据分析，我们要对数据进行呈现报告。常用的工具有哪些呢？SQL 数据库 单一数据导入处理EXCEL 复杂多为维度数据分析BI 数据可视化Python 数据爬取与处理 另外的输出流程应该是 数据采集-处理-建模-出样-美化-分发。这里需要注意的是EXCEL生成报告需要建立自己的标准表格规范，才能可读性更强。出于篇幅，后续再说。如Python BI 这些我也在努力充电中，后续作深入分享。 为事情赋予意义，积极变化。你get到了吗？ ENDHAPPY DAY.]]></content>
      <tags>
        <tag>电商 数据  AMAZON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[伪文艺青年的早晨]]></title>
    <url>%2F2018%2F10%2F13%2F%E4%BC%AA%E6%96%87%E8%89%BA%E9%9D%92%E5%B9%B4%E7%9A%84%E6%97%A9%E6%99%A8%2F</url>
    <content type="text"><![CDATA[启今天十月第二个周末，一觉睡到八点多，很满意~朋友圈批奏折，看到这个图在求诗，然后就有了如下。 承 秋思 青云满天浑似锦 红霞一抹淡棉白 孤舟向晚 疏影薄念 我 就着一痕清孤 等月来 也等你 转来首喜欢的歌，伴入眠 The Sandman by Neo Retros Sandman sprinkle your sand睡眠精灵 你挥洒着沙粒Send me away from this land送我远离这片土地Century’s gone几个世纪流逝Battle’s been won战争也已胜利But mostly my life’s out of hand但我的生活大多已乱套… ps: 生成音乐外链的技巧，比如网易云音乐歌曲链接是 https://music.163.com/#/song?id=21301200 那么它的外链就是 https://music.163.com/song/media/outer/url?id=21301200.mp3 合HAPPY Weekend .]]></content>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矩阵思维在电商上的使用]]></title>
    <url>%2F2018%2F10%2F10%2F%E7%9F%A9%E9%98%B5%E6%80%9D%E7%BB%B4%E5%9C%A8%E7%94%B5%E5%95%86%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[在电商业务中或大部分与人和市场有交集的岗位中都会需要用到跨学科综合性的技能知识，分析调研、市场营销、财务管理、统计、项目管理、组织行为学等等。但当涉及的面特别广了，知识就多了起来，多得记不住的时候就只有找到一些知识的基础通用逻辑、模型才是最有效的，找到思考框架然后重复套用。今天就整理一个简单的思考框架-矩阵思维。 优秀的思考是简约的，其中一种叫波士顿矩阵（BCG Matrix）。 波士顿矩阵波士顿矩阵又称市场增长率-相对市场份额矩阵、波士顿咨询集团法、四象限分析法、产品系列结构管理法等。波士顿矩阵的两个重要指标分别为市场增长率和企业相对市场占有率。要了解这两个重要指标，我们要先理解两个概念：市场引力和企业实力。 市场引力主要包括：市场增长率、目标市场容量、竞争对手强弱和利润高低等，企业市场增长率是综合指标。这是市场需求旺盛与否的表征。市场实力包括：市场占有率、技术、设备、资金利用能力。其中市场占有率是决定企业产品结构的内在因素。它直接显示你和对手PK的时候能不能吃鸡。通过这两个指标的组合可以把公司的经营业务分为四类： 产品可以是一款洗发水，可以是一项虚拟服务、也可以是一款APP。于是这些产品被分为高增长率-高占有率、高增长率-低占有率、低增长率-高占有率、低增长率-低占有率。 【高-高】产品群为明星类产品，想象一下自己穿着香奈儿挎着限量款包包的样子……从财务报告上看，它总是能产生利润，但是高增长往往意味着高投资。某种情况下，它不代表着自给自足。如果市场份额处于垄断或者领先地位时，那么企业不必再维持投入以保持高增长，此时产品能源源不断地维持现金流，它被称为现金牛。【低-高】产品群为金牛类产品，银行卡后面的0全靠它了。现金牛产品的特点是高市场份额和低增长率。产品已经迈入成熟期，其特征是产生大量的现金收入，数额远大于维持市场份额所需再投入的资金，是企业支持其他产品的后盾。【低-低】产品群为瘦狗类产品，一种冬日傍晚，陈旧街巷那种凄凉的即视感。这类产品对企业都是鸡肋，财务特点是利润率低、处于保本或亏损状态。这类产品往往会实行撤退或者整顿的战略。【高-低】产品群为问题类产品，伤脑筋吧？这些产品吸纳的资金总是多于所产生的资金。虽然高增长率意味着市场未来潜力好，但是份额不高要打上一个问号。不投入资金，产品会衰亡，即使投入资金，若只能勉强维持住市场份额。那么它最终仍属于瘦狗产品。 象限是动态的，明星产品的目标是成为现金牛，问题产品需要摆脱泥沼增加市场份额，而所有的产品都可能衰退为瘦狗。 要打一套组合拳，可以使企业的产品互相支持，资金良性循环。 第一法则：成功的月牙环。简单地说就是金牛产品和明星产品要多，问题和瘦狗产品要少，把圆圈框起来就像一个月牙。如果不是这样的结果，那估计你负责的市场做得很痛苦。 第二法则：黑球失败法则。就是你的市场里没有金牛产品，没有可以赚钱的产品，那一块用一个巨大的黑球填起，就像脸上刻了两个字——失败。 第三法则：东北方向大吉。东北方向还是西北方向不是本质，本质是靠近明星产品的方向，远离瘦狗产品的方向。这不难理解，有人下飞机就围拢很多粉丝，他定然是明星吧。 第四法则：踊跃移动速度法则。从问题产品变成明星产品再变成金牛产品，最后沦落成瘦狗，这个过程如果太快了，你就赚不到钱，就像你在看包包，男朋友催你赶快走，还没有摸热，那肯定包包买不成了；但是如果过程太慢了，你以为包包就是你的了？打折的时候，如潮水般涌来的人都在和你抢，还有你的戏份？所以这个过程非常微妙。 充分了解了四种业务的特点后，还须进一步明确各项业务单位在公司中的不同地位，从而进一步明确其战略目标。通常有四种战略目标分别适用于不同的业务。发展以提高相对市场占有率为目标，甚至不惜放弃短期收益。要使问题类产品尽快成为“明星”，就要增加资金投入。保持投资维持现状，目标是保持产品现有的竞争格局，对于较大的“金牛”可以此为目标，以使它们产生更多的收益。收割这种战略主要是为了获得短期收益，目标是回笼资金。对处境不佳的金牛类，没有发展前途的问题类和瘦狗类产品应视具体情况采取这种策略。放弃目标在于裁撤某些业务，减轻负担，以便将资源投入到效益较高的产品。这种目标适用于无利可图的瘦狗类和问题类产品。 一个优秀的销售必须对其业务加以调整，以使其投入的精力和资源趋于合理。 矩阵思维怎么进一步理解矩阵思维在 电商中的应用？ BCG Matrix 就像初中我们把学过的象限和坐标轴，用两个指标把条件分不同象限。而现在，我们可以把它认为是一种思考方式。只要留意，矩阵思维其实有很多应用。 电商应用通过曝光量和利润率能区分出带量商品，明星商品，潜力商品，鸡肋商品 商品 曝光量 利润率 类别 策略 商品A 10000 3% 带量产品 导流产品，维稳并提高关联销售 商品B 5000 30% 明星产品 现金流产品，注重售后优化体验 商品C 500 15% 潜力产品 增长曝光量、搜索权重 商品D 500 3% 鸡肋产品 优化转化率，实在不行的下架 高曝光量-高利润率的商品，属于电商中的明星产品，是重要的现金流业务。这里的曝光量可以是站内的店铺流量，也可以是独立电商平台的各种营销渠道。除了明星产品外，还对应着高曝光量-低利润率的导流商品，低曝光量-高利润率的成长潜力商品，低曝光量-低利润率的鸡肋商品等。 每种类别的商品对应不同的运营策略，潜力商品可以在后期运营中增长曝光量，培养搜索权重；鸡肋商品则要优化转化率。这里通过象限梳理清楚了基于商品的运营逻辑，避免盲目优化。 矩阵思维的一个优点是方便归类和聚焦，它是可以指导策略的。 商品的象限维度不止曝光量和利润率。我们可以尝试曝光量-转化率，去分析商品落地页的效果，比如高曝光量-低转化率的商品，是不是设计和文案有问题？也可以尝试利润率-回购率的象限维度，衡量商品长期的盈利多寡，某个商品虽然利润低了些，但是用户会反复购买，那么它也是半个明星产品。还可以尝试浏览量-时间，去分析新品测款数据，衡量商品短期热度，并不是所有的产品都能顺利走完一圈，有的新品刚上去是瘦狗，数据长时间上不去，一日为瘦狗日日为瘦狗，超过两个月没反应基本就狗带了。 思维的墙其它领域的应用还有很多，比如经典的时间管理上以重要性和紧急性为坐标得出轻重缓急。阿里巴巴在绩效管理以工作业绩和价值观为坐标区分出不同的象限进行员工管理。 当然如果可以，我们可以多加一个轴，四象限就变为八象限了。 最经典的就是RFM模型用消费金额、消费频率和最近一次消费时间三个指标划分客户价值。打破思维的墙，世界就是你的。只要象限合理、可用，数量是不是四并不重要。 矩阵思维的目的是区分，区分后我们可以再聚焦。聚焦就会回到我们常说的二八定律，要用八分的精力重点放在二分的产品上，因为它们会带来八分的利润。 人生，是思维的产物，思维框架就是脚手架，帮你抵达想到达的高点。]]></content>
      <tags>
        <tag>矩阵思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Search的一些高级指令]]></title>
    <url>%2F2018%2F09%2F11%2FGoogle%20Search%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AB%98%E7%BA%A7%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[如果说互联网时代必须要掌握的一项技能是什么?我觉得是主动获取信息的能力。生活中工作中我们遇到的问题80%的问题是别人解决过了的，我们通过search就可以获取、参考、使用，剩下的20%需要我们进行多次的深入research，也就是整合研究。这里让我来整理一下通过谷歌高级指令进行搜索的一些指令，帮助search更高效。1.双引号完全匹配，按关键词顺序进行搜索。 2.减号对搜索结果进行筛选。减号与前一个关键词之间一定要有一个空格，与后一个关键词之间一定不能有空格。搜索结果为，匹配前一个关键词但不匹配后一个关键词的结果。 3.使用无痕搜索快捷键 Ctrl+Shift+N 4.星号进行模糊匹配 5.related:查询与所给的网站类似的网站，它会返回Google认为的可能和你提供的网站类似的其他网站。 6.sitesite:是SEO最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。指定搜索的某个网站。例：site:xiaomi.com 7.filetype指定搜索的文件类型。例：how to learn python filetype:pdf 8.intitle / inurl在结果的标题/url中包含关键词，一次只能搜索一个关键词。 9.allintile/allinurl在结果的标题/url中包含所有关键词 10.define返回字典解释，和相关解释的网页 11.xx in yy单位换算，如kg in lbs 12.link查询链接到这个url的页面如：link:xiaomi.com，会返回小米网所有外部链接。从其它页面指向小米网。 EndingHappy search!]]></content>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做一个不一样的简历]]></title>
    <url>%2F2018%2F08%2F27%2F%E5%81%9A%E4%B8%80%E4%B8%AA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E7%AE%80%E5%8E%86%2F</url>
    <content type="text"><![CDATA[先看效果，我的简历 https://carlospython.github.io/myresume/public 缘起周末微信偶然看到的一篇CSDN微信公众号发的文章，是由南方大哥写的。讲了一个资深大神在20年IT生涯的浮沉录，主张专注比广博更有利，展示比文字更有力。所以他做了一个动态简历，用技术表达实力。然后看到他的简历后，结合自身的情况，也有一种想很要学着做一个的想法。 思考 找到南方github[https://github.com/sitexa/anires]内的Readme文件 安装Node.js和git 创建github新项目并开启Github Pages Clone项目文件到本地 修改个性化信息（简历内容，颜色样式） 编译上传 测试效果 用到的知识 创建Repositories\开启Github Pages 上传VUE.JS项目到Github的指令 遇到的问题 出现403错误，部署失败 123$ git pushremote: Permission to sitexa/anires.git denied to CarlosPython.fatal: unable to access &apos;https://github.com/sitexa/anires.git/&apos;: The requested URL returned error: 403 部署成功后，预览页面为空白页 详细过程 准备环境 安装Node.js环境：https://nodejs.org/ 安装git: https://git-scm.com/ 找到博客源码下载到本地 https://github.com/sitexa/anires 通过代码：打开gitbash 运行git clone https://github.com/sitexa/anires.git也可以直接下载到本地 创建New Repositories 创建一个新的项目名为anires ，也可以用其它名，到时修改本地文件夹内容就好。创建好后在setting内找到Github Pages，选择master branch。 Clone刚创建的Repositories到本地 123mkdir anires (创建anires文件夹)cd aniresgit clone https://github.com/xxxx/anires.git (xxx为自己的git ID 如我的就是CarlosPython) 将下载的源项目文件夹内容copy放到刚创建的 anires 里面 找到src文件里的 App.vue 和 Mobile.vue 个性化修改自己简历的内容和背景颜色 修改config文件夹index文件的 assetsPublicPath: &#39;./&#39; (非必需，如果出现加载的为空白页面可以不用) 编译 123456npm installnpm run dev （预览）npm run buildgit add . （将项目中所有文件添加到仓库）git commit -m &quot;update&quot; （把更新后的文件提交到仓库）git push （部署） 测试 找到开启Github Pages时生成的连接如我的是 https://carlospython.github.io/anires/再在链接基础上加个public 就是我们的预览链接了。也就是https://carlospython.github.io/anires/public/ 恭喜你完成了！ 会很开心~ 总结其实如果只是学习为了好玩copy别人的项目用，应该很简单，难度不大。但是由于这些对于我仍然是一个新的东西，还没有真正上传项目到Github过，导致自己错误上传一直布署不成功，没有用过Vue文件，找了半天才找到需要修改的文件在src文件里面，最后上传成功后一直是空白页，网上找了很多方法，无果，最后才求助南方大哥帮我看了一下，原来要在原链接上加一个public就可以了。 在解决问题过程中，有时局部问题不是真正的问题，因为你在一开始就是错的，要学会跳出当前问题看看每一步有没有错。就像我最开始一直403错误，显示拒绝被访问，两个git账号冲突。当时网上有和我一样问法的问题，他的办法是找到本机的凭证管理器删除git账号。这个在那个语境解决方法是对的，但还是不能解决我的问题。所以，同样的问题不一定是发生在相同环境，也就不一定会有通用的结果。重新往回走一步，看是否能跳过这个问题。 在问问题前，要先多尝试自己进行，先解决前面的小问题，遇到最后的大问题再把机会用掉。这次我就是试了好多次解决了很多小问题，在这期间面对新领域的东西也了解了一些基础，知道掌握了git的用法命令，最后跨不过去了再请教大神。通过自行对小问题的解决，可以对基础理解更深刻，避免问小儿科问题，把握有限的机会。 又完成了一篇文章，开心~]]></content>
      <tags>
        <tag>vue ，简历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国内外电商平台爬虫攻防机制]]></title>
    <url>%2F2018%2F08%2F09%2F%E5%9B%BD%E5%86%85%E5%A4%96%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E7%88%AC%E8%99%AB%E6%94%BB%E9%98%B2%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[电商平台的核心引擎大致分为两块，搜索架构和产品布局，应该说各有各的特色。当然今天的主题是反爬虫机制，电商平台如何能保护好自己的数据，又不影响正常用户体验，所谓当今业界一场持久的攻防博弈。 一阶爬虫（技术篇）应用场景一：静态结果页，无频率限制，无黑名单。 攻：直接采用scrapy爬取 防：nginx层写lua脚本,将爬虫IP加入黑名单，屏蔽一段时间（不提示时间） 应用场景二：静态结果页，无频率限制，有黑名单 攻：使用代理（http proxy、VPN），随机user-agent 防：加大频率周期,每小时或每天超过一定次数屏蔽IP一段时间（不提示时间） 应用场景三：静态结果页，有频率限制，有黑名单 攻：使用代理，随机1-3秒爬取，爬10秒休息10秒，甚至范围时间爬取，增加机器 防：当5分钟内请求超过60次，弹出验证码页面，通过验证增加5分钟无限制时间,不通过验证码则屏蔽增加一小时 (时间自拟) 应用场景四（Amazon）：静态结果页，有频率限制，有黑名单，有验证码 攻：python+tesseract验证码识别库模拟训练，或基于tor、crawlera(收费)的中间件（广度遍历IP） 防：前端异步加载js，动态加密token 应用场景五（Aliexpress）：动态结果页，有频率限制，有黑名单，有验证码 攻：python+Selenium，利用chrome内核加载动态结果页，更推荐用node+hex+ie内核做一个爬取客户端。java程序可以参考《简单破解Java浏览器组件jxbrowser》 防：见二阶爬虫 一阶爬虫属于单纯的技术性博弈，下面开始真正的人机交互博弈 二阶爬虫（进阶篇）应用场景六（PC天猫搜索页）：https，动态结果页，有频率限制，无黑名单，有验证码 防：基于个性化为主导，提倡用户主动登陆来获取更优质的用户体验。根据购买习惯为用户推荐一些正常促销的商品，如9.9洗发露、沐浴露、茶叶等（威露士经常做），以及一些优质的钻展商品。不但能区别人机，还能搜集用户访问喜好，针对性优化个性化大数据，还可以抵御ddos，可谓一举三得 攻：搜集刷单账号，用分布式任务 应用场景七（生意参谋）：https，React单页面应用，有验证码，LocalStorage，机器学习中间件 防：生意参谋本身是收费类的官方服务，从内测http过渡到https，而且近期加大对采集行为的打击，直接采取封号警告策略。以增加用户采集成本为限制，约束攻击方收敛性为。 单页面应用访问是遵循一定正常轨迹的。例如请求： 用户信息获取 数据列表1 数据列表2 数据详情1 … 针对数据可视化应用，大部分数据是经计算分析得到，并不会经常改变（甚至不变）。那么，数据结果存储入LocalStroage中，不但节省了网络请求加快页面速度（相当于缓存），还能区分用户行为轨迹。 详细的来说，通过程序编程得到的爬虫，无论是基于url request，还是基于解压webkit（如：jxbrower）。所生成的爬虫对象都是临时对象，那么不会存储LocalStroage数据，因此导致，访问数据页的请求轨迹每次都会是 用户信息获取 数据列表1（实际应被存储到LocalStroage） 数据列表2（实际应被存储到LocalStroage） 数据详情1 … 而正常用户行为（一直通过浏览器访问重复页面） 用户信息获取 数据详情1 … 总之，不会请求LocalStorage里有的 ![生意参谋] (http://image.3001.net/images/20170619/14978650932159.png) 加解密的JS代码 12345678910111213setItem: function(e, t) &#123; return void 0 === t ? this.removeItem(e) : (localStorage.setItem(e, this._serialize(t)), t) &#125;, getItem: function(e) &#123; return this.deserialize(localStorage.getItem(e)) &#125;, 另外，单页面应用是异步加载数据，一个页面中有ABC三类，只有A类需要验证码时用dialog占屏，BC类数据正常显示，爬虫开发时必然考虑不到这些情况，验证码并非强制要求输入（刷新后照常访问） 还可以分析每天用户请求数，访问习惯等等 分析用户行为轨迹的方式大致有3种：nginx流量中间件，web controller层拦截器，日志收集(flume + hadoop + sperk)* 。可能基于贝叶斯或决策树分析【实际怎么算只有开发者知道】 曾经被封过一次, 不是实时性的第二天才被封, 所以应该时 日志离线计算 得出的结果 攻：chrome插件(可获取https流量),另外把页面中的跳转链接记录到数据库中.因为一些链接只需要修改日期或ID等参数就可以复用. 链接中的一些铆点可能就是计算用于轨迹的因素. PS:这也是生意参谋一直警告的方式, 所有行为由读者自行负责, 与本文作者无关。 三阶爬虫（反攻篇）讲道理攻击方为何需要去爬取电商平台的数据，就为一个目的，逆演算出平台的权重计算，推导出各类合理范围内的指标（配合刷单，刷流量）。从技术层面上，永远是一个相互博弈的过程，如果有人下血本采用半人工，堆机器的方式暴力抓取，也是难以防控的。而且众所周知，电商技术的转化含金量非常高，机器和人工的成本就是九牛一毛，如果你的模型与业务模型擦边，辅助上一些内部渠道，无论是作为商家还是服务商都极快的变现 因此，反爬虫的最终核心点是要让攻击者不知道自己已经被判定为爬虫了。那么，攻击者只会悠哉的爬取数据，并兴高采烈的开始演算。而从平台方我们的最终目的是为了保护我们的数据和模型，那么关键点就来了。需要是让攻击方获取得数据不具有代表性，模型不可行即可。配合上流量木桶，定位到攻击者，我们将原始数据进行一些离散加工，加入一些噪音，让攻击方往错误的方向上推导模型。最终攻击方讲无法区分哪些数据是可用，那些又是噪音。 这时候，你会说，如果系统误杀正常用户，给出个一些展示数据错的离谱怎么办。这个度其实很好把握，我们只需要在排名*、成交单数、点击率等此类动态变化的维度加入噪音，不去加工价格、运费、产品详情，即使被程序判定为攻击者，并不影响正常用户的体验 *本文作者：leopard7777777，转载请注明FreeBuf.COM]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于电商的思考]]></title>
    <url>%2F2018%2F07%2F30%2F%E5%85%B3%E4%BA%8E%E7%94%B5%E5%95%86%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[从16年开始，始于Amazon，陆续结缘电商好几年。最开始是接触到淘宝，在大学时候，那时卖软件，一件铺货，无疾而终。后面从事外贸，又接触到跨境电商，从零到一做了很多工作，调研-注册-上新-学习视频-成交-思考。目睹了行业的飞速发展。这里总结一下从事电商的一些要点想法。 关于营销漏斗–大局观营销漏斗模型(Marketing Funnel)重点在于量化。出于不同的目标，可以有各种不同要素的漏斗。以目标反向倒推可以通过这个模型找到各要素需要做哪些工作，工作量几何。以目前工作状态正向预测可以通过这个模型找到未来的目标达成率是否能达满足预期，缺口几何。不管正向还是反向使用，重点是找到影响要素和接近准确的相邻环节的转化率。以目标为导向来指导后面工作的开展框架，并找到薄弱环节集中突破。但同时要注重过程控制，不断调整临时的变化。比如预期广告投放量在FB上转化比实际要低，就需要考虑调整一下投放在站内广告的比例或修改广告内容。量化–&gt;行动–&gt;过程控制–&gt;达成目标转化率。 关于本质–极简表达4P 和 4C产品端：Product Price Place Promotion客户端：Customer Cost Convenience Communication4P以市场需求为导向，4C以客户需求为导向。两种思维方式要一起用，大方向用4P，小方向用4C。Product产品：让产品赞美生活Price价格：没有所谓的科学定价，定价本质是各环节想赚多少。重点是让消费者觉得物有所值。Place渠道：利益链条每一链条的利益分配关系Promotion促销：辅助作用，本质是无限放大产品与人的关系，强化购买理由。 Customer客户：满足直接需求和潜在需求Cost成本：客户愿意付出的成本、代价是多少Convenience便利：操作上的和时间上的Communication沟通：被尊重被认同 市场营销的经典定义：有盈利的满足顾客需求。 关于流动性–活下去并放大收益现金流：缩短回款周期，减少物流时间，有意识延长物流付款周期。 流动比率（Working Capital Ratio)：强调流动，流动的资产/流动负债保持一定的负债的规杠杆化 【大数据分析-上市跨境企业的流动比率情况】 待完成 关于矩阵思维–有主次有方向波士顿矩阵(BCG Matrix):市场增长率-相对市场份额矩阵、波士顿咨询集团法、四象限分析法、产品系列结构管理法等。其认为公司若要取得成功，就必须拥有增长率和市场份额各不相同的产品组合。组合的构成取决于现金流量的平衡。这种思维方式是选取两个重要的量化指标建立坐标系，对产品进行分类，从而合理安排分配精力、资源投入比例。典型分为：明星类、问题类、奶牛类、劣狗类。象限是动态的，明星产品的目标是成为现金牛，问题产品需要摆脱泥沼增加市场分额，而所有产品都可能衰退为劣狗。重点是找到阶段产品所处的周期给到对应的理解和发展方向。 电商SKU使用以曝光量和利润率为坐标系，将不同产品分布的区域找出来 商品 曝光量 利润率 类别 策略 商品A 10000 3% 带量产品 导流产品，维稳并提高关联销售 商品B 5000 30% 明星产品 现金流产品，注重售后优化体验 商品C 500 15% 潜力产品 增长曝光量、搜索权重 商品D 500 3% 鸡肋产品 优化转化率，实在不行的下架 同样的还可以用在其它参数组合如曝光量和转化率，利润率和回购率等等。重点是对繁多的产品进行归类和聚焦然后采取合适的策略。时间管理利用矩阵思维对事件优先度按，紧急程度和重要程度进行划分。就出现了我们常用的四种情况的划分对于重要事情的定义：影响群体利益的事情、上级关注的事情、影响绩效考核的事情、价值重大的事情电商运营的时间管理策略重要不紧急（制定工作计划）：产品优化上新、数据分析、广告投放推广、工作流程优化重要紧急（马上执行）：客户投诉、差评、将到期的任务、新政策理解不紧急不重要（对它说不）：同事的打断、不合理的请求紧急不重要（抽空/交由下属解决）：临时客户咨询、物流进度跟进、款项发票跟进、付款申请 缓急轻重、有条不紊就是日常需要修炼的重要课程，矩阵思维背后是对信息纬度关联性的思考后主观 判断作出决策并进行精力再分配。 关于机会成本–选择得到同时接受失去机会成本：为了得到某种东西而必须放弃的东西。一个人不可能同时把所有的事情做到最好。再好的时间精力资源管理，追求的是总效用最大化，而不是每个单项的完美。在电商运营时也一样，不可能同时把精力投入到供应链、运营、推广、跨平台全面铺开，只能说阶段性的找重点作突破，才能效用最大化。 关于注意力效率就是节约用户注意力。 持续补充~]]></content>
      <tags>
        <tag>电商</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Urllib的基础用法]]></title>
    <url>%2F2018%2F07%2F19%2F%E5%85%B3%E4%BA%8ERequests%E7%9A%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[URLLIB 是Python 的内置HTTP请求库包含四个模块： Request 模拟发送请求 Error 异常处理 Parse 工具模块 处理URL Robotparser 识别判断ROBOTS.TXT]]></content>
      <tags>
        <tag>Urllib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP基本原理]]></title>
    <url>%2F2018%2F07%2F18%2FHTTP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[URLURL(Universal Resource Locator) 统一资源定位符URI(Uniform Resource Identifier) 统一资源标志符通过URL/URI来唯一指定了它的访问方式。 Hypertext在浏览器看到的页面是超文本解析而成 HTTPSHTTP(Hyper Text Transfer Protocol)超文本传输协议HTTPS(Hyper Text Transfer Protocol over Secure Socket Layer)以安全为目标的HTTP通道 REQUESTRequst 请求分四部分内容，Request Method、Request URL、Request Headers、Request BodyRequest Method : GET 和 POST 包含敏感信息使用POST方式请求GET提交数据限制1024字节，POST没限制 Request Headers :用于说明服务器使用的附加信息 ，Cookie\Referer\User-AgentRequest Body :承载POST一个请求中的FORM DATA ，对于GET请求Request Body 为空Content-Type|提交数据方式—|—aapplication/x-www-form-urlencoded |Form 表单方式multipart/form-data\ |表单文件上传提交application/json |序列化Json数据提交text/xml |XML数据提交 Response服务器返回给客户端。包括 Response Status Code\Response Headers\Response BodyResponse Status Code 响应状态码 ，200正常 404找不到页面 500服务器内发生错误Response Headers 响应头包含对请求的应答信息，如CONTENT-TYPE\SERVER\SET-COOKIEResponse Body 响应体 ，最主要的数据 都包含在响应体中]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于流动性的思考.md]]></title>
    <url>%2F2018%2F07%2F18%2F%E5%85%B3%E4%BA%8E%E6%B5%81%E5%8A%A8%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[为什么要关注流动性大环境下：贸易战如火如荼2000亿悬而未决，汇率一路高歌直奔7去，A股新底大量独角兽扎堆上市找现金，周围企业裁员增加，P2P连续暴雷，M2增速差继续收窄 流水不腐，户枢不蠹 真正的稳定从来都不是从低流动里获得的，而是高流动性 同时要提高个人的流动性，不能太稳定。脑子要时刻动，接触新思想，不要总沉浸在自己的世界而不出去看看。 人各有志没有错，但所有人都会有一个共同的目的：更多的探索这个社会，在这个社会上，让自己活得更好。 电商行业创业最重要的是要理解一下周转现金变化，理解一下回款周期，理解一下流动比率，理解一下保持一定的负债的规杠杆化 流动性有时候会比你赚了多少钱更重要。“现金流量表”在报表体系中，作为记录所有实业底层架构，重要程度从未减弱过。]]></content>
      <tags>
        <tag>电商 ，流动性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python学习回顾]]></title>
    <url>%2F2018%2F07%2F16%2FPython%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[关于Python3选择Python初衷是迎接人工智能和大数据时代，避免成为新世纪的文盲。我觉得懂一点编程未来会活得更主动，同时听说Python提供了非常完善的基础代码库更易学更容易站在巨人的肩膀上前进，所以在众多语言中选择了Python。其实第一次接触程序语言是在大学——C语言，但当时完全没有感觉，现在一点印象都没有了。所以这次学习要从兴趣出发，从项目出发，同时确认好学习方向。那么目前初步方向将从语法到爬虫到大数据分析到人工智能这样的路径进行深入。相信我可以走的更远。 Python的语法笔记 编码默认源码文件以UTF-8编码，所有字符串都是unicode字符串。unicode的作用是能够使计算机实现跨语言、跨平台的文本转换及处理。 命名建议只用小写字母、数字和下划线，不能以数字开头。避免与系统保留字（关键字）重复。如下：12import kewordkeword.kwlist [‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’] 注释 单行以#开头，多行以三个引号在注释语开始行和结束行。和Markdown中代码块引用一样。 行缩进 python不用大括号，直接用缩进来表示代码块。编码要注意缩进对程序如循环的影响。 数字类型 int（整数） bool（布尔） fload（浮点） complex（复数）如：1+2j 要从复数 z 中提取实部和虚部，使用 z.real 和 z.imag 字符串 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。字符串两种索引方式，从左往右以0开始，从右往左以-1开始。使用变量[头下标：尾下标]进行截取。字符串可以用+连接，用*重复转义字符\ . 在行尾时为续行符 \n 换行 \r 回车 \f 换页字符串格式化常用 %s 格式化字符串 %d格式化整数 如 print (&quot;我叫 %s 今年 %d 岁!&quot; % (&#39;小明&#39;, 10))字符串内建函数 capitalize() 转换首字母大写 encode(encoding=’UTF-8’,errors=’strict’) 12str="love"print(str[0:-1]) # 输出第一个到倒数第二个的所有字符 结果为 lov 输出 print默认输出是换行的，如果要实现不换行要变量末尾加上 end=””需要在同一行显示运行多行语句，语句之间使用分号分隔。输出方式：表达式语句和 print() 函数。f.close() 处理文件后关闭 输入 将整个模块(somemodule)导入，格式为： import somemodule从某个模块中导入某个函数,格式为： from somemodule import somefunction从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc将某个模块中的全部函数导入，格式为： from somemodule import *读写文件 open(filename,mode) r只读，r+读写 w+ 读写，编辑没有则创建新文件 变量 python变量不需要声明。每个变量在使用前必须要赋值才会被创建。 数据类型 有六种 其中3种为不可变数据 Number String Tuple(元组)和3种可变数据 List Dictionary Set (集合) 使用type()函数可以查询变量的对象类型可以使用大括号或set()函数创建集合，但创建一个空集合必须用set()不能用{}。{}表示一个空字典。 123456Number:a=520 String:str=&quot;love&quot;Tuple:(&quot;abc&quot;,1,4) List:list=[&quot;abc&quot;,1,4]Dictionary:dict=&#123;&quot;name&quot;:&quot;carlos&quot;,&quot;password&quot;:1&#125;Set:student=&#123;&quot;A&quot;,&quot;B&quot;&#125; 数据转换 函数 描述 hex(x) int to 十六进制str oct(x) int to 八进制str ord(x) 字符转为整数值 chr(x) 整数转为字符 算数运算符 正常加减乘除 % 取余数 //取整数 **取幂 比较运算符 == != &gt; &lt; &gt;= &lt;= 赋值运算符 等号在后面 如 //= += 位运算符 &amp; 按位与 | 或 ^ 异或 ~ 取反 &lt;&lt; 左移 &gt;&gt; 右移 逻辑运算符 and or not 与或非 成员运算符 in ,not in 身份运算符 is , is not is 与 == 区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。 数学函数 三角函数 随机数函数 if语句 if - elif - else 循环语句 while 循环 要注意避免死循环for 循环可以遍历任何序列的项目，如一个列表或者一个字符串结合break 语句用于跳出当前循环体range()函数 遍历数字序列，会生成数字序列pass 语句，用做占位语句 保持结构的完整 几个有意思是要理解的循环：123456# Fibonacci series: 斐波纳契数列# 两个元素的总和确定了下一个数a, b = 0, 1while b &lt; 10: print(b) a, b = b, a+b 运行结果： 理解赋值123456112358 1234567for i in range(0, 10, 3) : #使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长') print(i) 结果： 0369 12345678for n in range(2, 10): for x in range(2, n): if n % x == 0: print(n, '等于', x, '*', n//x) break else: # 循环中没有找到元素 print(n, ' 是质数') 输出结果： 理解X值的传递123456782 是质数3 是质数4 等于 2 * 25 是质数6 等于 2 * 37 是质数8 等于 2 * 49 等于 3 * 3 迭代器与生成器 迭代器用法 iter() # 创建迭代器对象 和 next() # 输出迭代器的下一个元素可以用于字符串列表或元组对象 组合for while 语句 访问集合元素生成器用法 调用yield函数以下实例使用 yield 实现斐波那契数列： 1234567891011121314151617import sys def fibonacci(n): # 生成器函数 - 斐波那契 a, b, counter = 0, 1, 0 while True: if (counter &gt; n): return yield a a, b = b, a + b counter += 1f = fibonacci(10) # f 是一个迭代器，由生成器返回生成 while True: try: print (next(f), end=" ") except StopIteration: sys.exit() 输出结果： #理解迭代器和生成器0 1 1 2 3 5 8 13 21 34 55 函数 函数能提高应用的模块性，和代码的重复利用率定义函数 def 函数名（参数列表）：调用函数的参数类型 必需参数/关键字参数/默认参数/不定长参数不定长参数 一个星号参数会以元组形式导入 两个星号会以字典形式导入 def fuctionname([formal_args,]*var_args_tuple):lambda创建匿名函数 lambda[arg1 [,arg2,····argn]]:expression 变量作用域 变量作用域决定了哪个程序可以访问哪个特定的变量名称4种 Local 局部作用域 Enclosing 闭包函数外的函数中 Global 全局作用域 Build-in 内建作用域global和nonlocal关键字 用于作用域修改，进行关键字声明。如果要修改嵌套作用域用nonlocal 数据结构常用针对数据进行修改方法： append（加元素到结尾）extend（扩充列表）insert（指定插入位置）remove（移除第一个元素）pop（指定位置元素移除）a.pop()返回最后一个元素)clear（移除列表所有） index（返回第一个值索引） ,count（出现次数）sort（排序） reverse（倒序） copy（浅复制） 模块 每个模块都有一个_name_属性当值是_main_时表明该模块自身在运行，否则是被引入dir() 找到模块内定义的所有名称应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中 通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量pickle模块urllib.request 访问互联网发送电子邮件的 smtplib:日期和时间 datetime数据压缩 zlib,gzip,bz2,zipfile 面向对象 class ClassName:继承和多继承类的专有用法 _init_ 构造函数 ， _del_ 析构函数 正则表达式正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。对字符串的过滤逻辑。 re.match 与 re.search区别 前者只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。re.sub 替换字符串的匹配项compile CGI common gateway interface ,通用网关接口 MySQL PyMySQL 连接数据库 -网络编程 Socket 套接字Socket servePython Internet模块 -XML解析extensible Markup Language 可扩展标记语言 -JSON数据解析 json.dumps():对数据进行编码。json.loads():对数掘进行解码。 持续更新新体会和内容]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown文本写作]]></title>
    <url>%2F2018%2F07%2F14%2FMarkdown%E6%96%87%E6%9C%AC%E5%86%99%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[通过HEXO第一次接触到了Markdown。给人的第一感觉是很简单，整个版面看上去比较清爽，是我想要的feel。Markdown 可以通过简单、易读易写的文本格式生成结构化的HTML文档，应用广泛。基于HTML的语法可以完全用在Markdown中，当然大部分时候我们更需要用Markdown针对书写的边便捷用法，这里做一个总结。 常用语法1.标题 在句首插入#表示标题，有六种标题。也就是最多可以有6个#号表示最小字号的标题 2.列表 有序列表 数字加英文的点 如 1. 2. 3.无序列表 *+- 这三个任意一种后面文本接空格 3.引用块 在引用块的句首加&gt;嵌套引用需要缩进 比如第一次嵌套用&gt;&gt; 4.代码块 使用 ``` 进行代码块引用 这里可以接对应的代码语言名Markdown会自行使用对应的背景渲染。行内引用 可以用两个`` 夹住句子 5.链接超链接 \[A](网址 &quot;optional title&quot;) 图片链接 \![A](网址/地址 ) 地址也可以用本地路径，可以在makdown文件夹建一个picture文件夹，optional title的鼠标悬停图片上会显示，可不写。 6.强调 在字两边加一个*为斜体 在字两边加两个**为粗体 在字两边加三个***为粗斜体 记得不要有与字不要有空格 7.分割线 连续三个或以上星号或下划线或减号 都可以生成一个分割线如下 8.反斜杠 Markdown 支持将大部分符号前面加上反斜杠来帮助插入普通的符号 9.居中居右居左 居中&lt;center&gt;文本&lt;/center&gt;居右&lt;p align=&quot;right&quot;&gt;文本&lt;/p&gt;居左&lt;p align=&quot;left&quot;&gt;文本&lt;/p&gt; 10.换行&lt;/br&gt;或两个或以上空格 进阶语法1.表格 使用|分隔不同的单元格，使用-分隔表头与其它行右对齐------: ，左对齐 :------居中对齐---:---，默认居中对齐------示例： 12日期 |天气 | 心情 :-- | -:- |---:B | A | C 日期 天气 心情 B A C 注意：这里有个坑，我试了很多次才找出来。：冒号一定要在英文状态下打，不然识别不了。然后-数量不限定，可以一个也可以多个。 2.图表 图表有更多代码。参考这里这种用的少，需要用的时候可以再来调取用法。 3.字体字号和颜色 &lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;&lt;font color=gray size=72&gt;color=gray&lt;/font&gt; Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3 。颜色是按十六进制颜色值来的。常用的红色（#FF0000）金色（#FFD700）黄色（#FFFF00） 4.图片居中 居中，在图片引用上一栏加 &lt;div alighn=center&gt; 改变图片大小&lt;img src=&quot;./xxx.png 路径&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot; /&gt; 可能会导致图变形，用的少 5.待办事宜 横框+空格+方括号+空格+文本 通过方括号内加入X来区别已办未办，注意方括号也要有空格。 爬山 [X] 走向人生巅峰 [X] K歌 冷门用法1.删除线 使用 ~~ 将要删除文字夹起来。表示删除 HAPPYDAY 2.注脚 使用 [^footer] 表示注脚，注意一个引用要写两次。如下 玫瑰是什么颜色[^footer1][^footer1]: 玫瑰是红的。 玫瑰是什么颜色[^footer1][^footer1]: 玫瑰是红的。 3.页内跳转 使用html代码实现页内跳转。在要跳转到的位置定义个锚&lt;span id = &quot;jump&quot;&gt;World&lt;/span&gt;，然后使用[HELLO](#jump)将你好设置为一单击即跳转到WORLD所在位置的效果 12[HELLO](#jump) &lt;span id = &quot;jump&quot;&gt;World&lt;/span&gt; HELLOWorld 4.LateX公式 行内公式：使用两个”$”符号引用公式: $公式$行间公式：使用两对“$$”符号引用公式： $$公式$$这个其实挺复杂，参考这里。 5.首行缩进 半方大的空白&amp;ensp;或&amp;#8194;【常用】全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; 间距如下：&ensp;AAA&emsp;AAA&nbsp;AAA 6.视频嵌套 123&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.jpg&quot;&gt;&lt;source id=&quot;mp4&quot; src=&quot;http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt; 7.音频嵌套 123&lt;audio id=&quot;audio&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;&lt;source id=&quot;mp3&quot; src=&quot;http://oht4nlntk.bkt.clouddn.com/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3&quot;&gt;&lt;/audio&gt; 总结基本用法能解决大部分情景，高阶用法一般和HTML语法整合的多，但是用的少。如果想更好的进阶可以学习一下HTML语法。一个原则，常用的要能熟练内化为自己的潜意识，少用的要收录起来需要时可以最短时间内调用。]]></content>
      <tags>
        <tag>MARKDOWN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Hexo部署到Github建立极简博客]]></title>
    <url>%2F2018%2F07%2F13%2F%E7%94%A8Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%BB%BA%E7%AB%8B%E6%9E%81%E7%AE%80%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[通过HEXO迅速搭建属于自己的博客是一件很开心很有价值的事情。开心在于，自己可以按喜好定制界面风格，价值在于拥有了一个可以输出的地方。 搭建环境Hexo是目前很流行的博客框架，我选择了它。对应的同类可能还有很多如Jekyll(ruby)，Pelican(python)，Hexo(javascript)。各有各的好，但缘分这东西谁说的准。Nodejs是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它的npm是全球最大的开源库生态系统。第一次见，好厉害的样子。Git是目前世界上最先进的分布式版本控制系统（没有之一），对应的是集中式版本控制系统 （CSV、SVN)。上面三个东西就是需要我们安装到本地的基础三件套。 安装GitWindows: Download &amp; install git 安装Nodejs先安装nvm，这是Nodejs版本管理器。也可参考RUNOOB.COM的安装。 $ brew install node通过 node –version 和 npm –version 检查是否安装成功。 安装Hexo上面的环境匹配好后，安装Hexo就是一句话的事~ $ npm install hexo-cli -g 操作Hexo完成博客创建这里要用到一些基本的指令最常用的就有下面这些123456$ hexo init [folder] #新建网站$ hexo g #生成generate静态文件$ hexo s #启动服务器。可以进行预览 http://localhost:4000/ $ hexo d #部署deploy网站$ hexo clean #清除缓存文件和静态文件 可以理解为修改后刷新一下$ hexo new [postname] #生成新的博客文件 1.新建myblog文件夹正式开始，打开Gitbash窗口12345$ hexo init myblog$ cd myblog$ npm install$ npm g$ npm s Surprise，surprise，你已经成功的在本地创建了一个你的博客文件夹。同时会生成一个以landscap主题的静态文件页面，可以通过 http://localhost:4000/ 进行访问。2.找中意的Hexo主题并使用它这里最经典的是next主题，极简风。Hexo库里面有很多很赞的风格供选择。由于next选择的人多，所以对应的个性化配置教程也会更多些，前期作为熟悉基本操作也建议使用这个，后面对于很多地方理解透了再自由发挥。找到中意的theme后，点击进入github找到对应的网址如：https://github.com/theme-next/hexo-theme-next 然后运行clone指令如下：12$ cd myblog$ git clone https://github.comiissnan/hexo-theme-next themes/next #下载next主题到本地 3.创建github属于你的repository注册一个属于你的github帐号，这里按正常流程走下来就ok。然后创建一个自己的仓库，可以参考官方的帮助文档[creating a new repository]（https://help.github.com/articles/creating-a-new-repository/） 。这里需要注意的是Repository name 要和Owner的名字一样并且以特定的格式来 如 username.github.io 。以我的为例就是 https://github.com/CarlosPython/CarlosPython.github.io。4.简单修改站点配置文件myblog文件夹中有两个_config.yaml文件，这里需要做一下区分，官方将根目录中的叫做站点配置文件，them主题目录下的叫做主题配置文件。到这里我们需要找到根目录下站点配置文件myblog/_config.yaml 修改一些东西。12345678910111213141516title: Minimalistsubtitle: description:authour: CarlosChenlanguage: en #也可以用中文的zh-Hanstimezone: ------# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next #这里改为下载好的主题名-----deploy: #最底部 type: git repo: https://github.com/CarlosPython/CarlosPython.github.io.git #很重要不要弄错了 branch: master 基本设置完成后，就可以用 $ hexo s在http://localhost:4000/预览一下改动后的效果了。针对主题的一些细节优化升级可以后面再处理。5.布署博客到github12$ npm i -s hexo-deployer-git #安装hexo-deploy-git$ hexo d 期间第一次用，会需要验证登陆git，照常登陆就OK。此时刷新一下，就可以看到你的博客在git域名了，比如我的https：//CarlosPython.github.io6.创建一个博客文章试试1$ hexo new postname #创建以postname为名的.md文件 用Markdown编辑器就可以写博客了，我用的是sublime 3。最后上传到git1$ hexo g 可能会遇到的问题解决1.$ hexo s预览时提示4000端口被占用。我是直接退出gitbash再开就ok了，网上说要改端口什么的觉得麻烦。2.中文title 显示乱码。语言改为中文的对应格式3.无法Ping通Github。Push的时候报错如下：123456$ git push -u orgin masterssh: Could not resolve hosname github.com:Temporary fail in name resolutionfatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists. 解决： ctrl+r输入cmd调出命令提示符，ping一下github.com。 会显示 Ping 请求找不到主机github.com。请检查该名称，然后重试。这个时候需要在host文件作个修改 hosts文件路径： C:\Windows\System32\drivers\etc右键-属性-安全-编辑，选中当前电脑登录的用户，给自己最高权限，确认。用记事本打开后在最后一行加： 12345678192.30.253.113 github.com192.30.252.131 github.com185.31.16.185 github.global.ssl.fastly.net74.125.237.1 dl-ssl.google.com173.194.127.200 groups.google.com192.30.252.131 github.com185.31.16.185 github.global.ssl.fastly.net74.125.128.95 ajax.googleapis.com 保存，然后再ping,发现就有数据了。 3.其它的不知道什么鬼的。直接删除文件夹从来，有点粗暴但很管用，很多时候刚用修改或执行一些步骤理解不到位就会报错，试了几次没法就直接重来一次。 进阶方向 Hexo主题优化进阶 Github绑定自己的域名 Markdown文本写作 EndingHappy posting!]]></content>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
