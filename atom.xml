<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Minimalist</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-18T00:26:08.326Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CarlosChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习回顾</title>
    <link href="http://yoursite.com/2018/07/16/Python%E5%AD%A6%E4%B9%A0%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2018/07/16/Python学习回顾/</id>
    <published>2018-07-16T01:39:37.000Z</published>
    <updated>2018-07-18T00:26:08.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Python3"><a href="#关于Python3" class="headerlink" title="关于Python3"></a>关于Python3</h2><p>选择Python初衷是迎接人工智能和大数据时代，避免成为新世纪的文盲。我觉得懂一点编程未来会活得更主动，同时听说Python提供了非常完善的基础代码库更易学更容易站在巨人的肩膀上前进，所以在众多语言中选择了Python。其实第一次接触程序语言是在大学——C语言，但当时完全没有感觉，现在一点印象都没有了。所以这次学习要从兴趣出发，从项目出发，同时确认好学习方向。那么目前初步方向将从语法到爬虫到大数据分析到人工智能这样的路径进行深入。相信我可以走的更远。</p><h2 id="Python的语法笔记"><a href="#Python的语法笔记" class="headerlink" title="Python的语法笔记"></a>Python的语法笔记</h2><ul><li><strong>编码</strong>默认源码文件以UTF-8编码，所有字符串都是<a href="https://baike.baidu.com/item/Unicode/750500?fr=aladdin" target="_blank" rel="noopener">unicode</a>字符串。unicode的作用是能够使计算机实现跨语言、跨平台的文本转换及处理。</li><li><strong>命名</strong>建议只用小写字母、数字和下划线，不能以数字开头。避免与系统保留字（关键字）重复。如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keword</span><br><span class="line">keword.kwlist</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p></blockquote><ul><li><strong>注释</strong> 单行以#开头，多行以三个引号在注释语开始行和结束行。和Markdown中代码块引用一样。</li><li><strong>行缩进</strong> python不用大括号，直接用缩进来表示代码块。编码要注意缩进对程序如循环的影响。</li><li><strong>数字类型</strong> int（整数） bool（布尔） fload（浮点） complex（复数）如：1+2j 要从复数 z 中提取实部和虚部，使用 z.real 和 z.imag</li><li><strong>字符串</strong> <blockquote><p>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<br>字符串两种索引方式，从左往右以0开始，从右往左以-1开始。<br>使用变量[头下标：尾下标]进行截取。<br>字符串可以用+连接，用*重复<br>转义字符\ . 在行尾时为续行符  \n 换行  \r 回车 \f 换页<br>字符串格式化常用 %s 格式化字符串 %d格式化整数 如 <code>print (&quot;我叫 %s 今年 %d 岁!&quot; % (&#39;小明&#39;, 10))</code><br>字符串内建函数   capitalize() 转换首字母大写  encode(encoding=’UTF-8’,errors=’strict’)</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">"love"</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])   <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br></pre></td></tr></table></figure><p>结果为 lov</p><ul><li><p><strong>输出</strong> </p><blockquote><p>print默认输出是换行的，如果要实现不换行要变量末尾加上 end=””<br>需要在同一行显示运行多行语句，语句之间使用分号分隔。<br>输出方式：表达式语句和 print() 函数。<br>f.close() 处理文件后关闭</p></blockquote></li><li><p><strong>输入</strong></p><blockquote><p>将整个模块(somemodule)导入，格式为： import somemodule<br>从某个模块中导入某个函数,格式为： from somemodule import somefunction<br>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc<br>将某个模块中的全部函数导入，格式为： from somemodule import *<br>读写文件 open(filename,mode)    r只读，r+读写 w+ 读写，编辑没有则创建新文件</p></blockquote></li><li><p><strong>变量</strong> python变量不需要声明。每个变量在使用前必须要赋值才会被创建。</p></li><li><strong>数据类型</strong> 有六种 <blockquote><p>其中3种为不可变数据 Number String Tuple(元组)<br>和3种可变数据 List Dictionary Set (集合)  使用type()函数可以查询变量的对象类型<br>可以使用大括号或set()函数创建集合，但创建一个空集合必须用set()不能用{}。{}表示一个空字典。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number:a=520   </span><br><span class="line">String:str=&quot;love&quot;</span><br><span class="line">Tuple:(&quot;abc&quot;,1,4)      </span><br><span class="line">List:list=[&quot;abc&quot;,1,4]</span><br><span class="line">Dictionary:dict=&#123;&quot;name&quot;:&quot;carlos&quot;,&quot;password&quot;:1&#125;</span><br><span class="line">Set:student=&#123;&quot;A&quot;,&quot;B&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>数据转换</strong></li></ul><table><thead><tr><th style="text-align:right">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:right">hex(x)</td><td style="text-align:left">int to 十六进制str</td></tr><tr><td style="text-align:right">oct(x)</td><td style="text-align:left">int to 八进制str</td></tr><tr><td style="text-align:right">ord(x)</td><td style="text-align:left">字符转为整数值</td></tr><tr><td style="text-align:right">chr(x)</td><td style="text-align:left">整数转为字符</td></tr></tbody></table><ul><li><p><strong>算数运算符</strong></p><blockquote><p>正常加减乘除  % 取余数  //取整数    **取幂</p></blockquote></li><li><p><strong>比较运算符</strong></p><blockquote><p>==   != &gt;  &lt;  &gt;=  &lt;=</p></blockquote></li><li><p><strong>赋值运算符</strong></p><blockquote><p>等号在后面  如 //=     +=</p></blockquote></li><li><p><strong>位运算符</strong></p><blockquote><p>&amp; 按位与 | 或  ^ 异或  ~ 取反 &lt;&lt; 左移 &gt;&gt; 右移 </p></blockquote></li><li><p><strong>逻辑运算符</strong></p><blockquote><p>and  or  not  与或非</p></blockquote></li><li><p><strong>成员运算符</strong></p><blockquote><p>in ,not in </p></blockquote></li><li><p><strong>身份运算符</strong></p><blockquote><p>is , is not </p></blockquote></li></ul><p>is 与 == 区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><ul><li><strong>数学函数</strong></li><li><strong>三角函数</strong></li><li><p><strong>随机数函数</strong></p></li><li><p><strong>if语句</strong></p><blockquote><p>if - elif - else</p></blockquote></li><li><p><strong>循环语句</strong></p><blockquote><p>while 循环  要注意避免死循环<br>for 循环可以遍历任何序列的项目，如一个列表或者一个字符串<br>结合break 语句用于跳出当前循环体<br>range()函数  遍历数字序列，会生成数字序列<br>pass 语句，用做占位语句 保持结构的完整</p></blockquote></li></ul><p>几个有意思是要理解的循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fibonacci series: 斐波纳契数列</span></span><br><span class="line"><span class="comment"># 两个元素的总和确定了下一个数</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</span><br><span class="line">    print(b)</span><br><span class="line">    a, b = b, a+b</span><br></pre></td></tr></table></figure></p><p>运行结果： <strong>理解赋值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :    <span class="comment">#使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长')</span></span><br><span class="line">    print(i)     </span><br><span class="line">结果：  </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            print(n, <span class="string">'等于'</span>, x, <span class="string">'*'</span>, n//x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 循环中没有找到元素</span></span><br><span class="line">        print(n, <span class="string">' 是质数'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：   <strong>理解X值的传递</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2  是质数</span><br><span class="line">3  是质数</span><br><span class="line">4 等于 2 * 2</span><br><span class="line">5  是质数</span><br><span class="line">6 等于 2 * 3</span><br><span class="line">7  是质数</span><br><span class="line">8 等于 2 * 4</span><br><span class="line">9 等于 3 * 3</span><br></pre></td></tr></table></figure></p><ul><li><strong>迭代器与生成器</strong><blockquote><p>迭代器用法 iter() # 创建迭代器对象 和 next() # 输出迭代器的下一个元素<br>可以用于字符串列表或元组对象 组合for while 语句 访问集合元素<br>生成器用法 调用yield函数<br>以下实例使用 yield 实现斐波那契数列：</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span> <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> (next(f), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>输出结果： #<strong>理解迭代器和生成器</strong><br><code>0 1 1 2 3 5 8 13 21 34 55</code></p><ul><li><p><strong>函数</strong></p><blockquote><p>函数能提高应用的模块性，和代码的重复利用率<br>定义函数 def 函数名（参数列表）：<br>调用函数的参数类型   必需参数/关键字参数/默认参数/不定长参数<br>不定长参数 一个星号参数会以元组形式导入 两个星号会以字典形式导入  <code>def fuctionname([formal_args,]*var_args_tuple):</code><br>lambda创建匿名函数  <code>lambda[arg1 [,arg2,····argn]]:expression</code></p></blockquote></li><li><p><strong>变量作用域</strong></p><blockquote><p>变量作用域决定了哪个程序可以访问哪个特定的变量名称<br>4种  Local 局部作用域 Enclosing 闭包函数外的函数中  Global 全局作用域 Build-in  内建作用域<br>global和nonlocal关键字 用于作用域修改，进行关键字声明。如果要修改嵌套作用域用nonlocal</p></blockquote></li><li><p><strong>数据结构</strong><br>常用针对数据进行修改方法：</p><blockquote><p>append（加元素到结尾）extend（扩充列表）insert（指定插入位置）remove（移除第一个元素）pop（指定位置元素移除）a.pop()返回最后一个元素)clear（移除列表所有） index（返回第一个值索引） ,count（出现次数）sort（排序） reverse（倒序） copy（浅复制）</p></blockquote></li><li><p><strong>模块</strong></p><blockquote><p>每个模块都有一个<code>_name_</code>属性当值是<code>_main_</code>时表明该模块自身在运行，否则是被引入<br><code>dir()</code> 找到模块内定义的所有名称<br>应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中 通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量<br>pickle模块<br>urllib.request 访问互联网<br>发送电子邮件的 smtplib:<br>日期和时间 datetime<br>数据压缩 zlib,gzip,bz2,zipfile</p></blockquote></li><li><p><strong>面向对象</strong></p><blockquote><p>class ClassName:<br>继承和多继承<br>类的专有用法 <code>_init_</code> 构造函数  ， <code>_del_</code> 析构函数 </p></blockquote></li></ul><hr><ul><li><strong>正则表达式</strong><br>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。对字符串的过滤逻辑。<blockquote><p>re.match 与 re.search区别 前者只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。<br>re.sub 替换字符串的匹配项<br>compile </p></blockquote></li></ul><ul><li><p><strong>CGI</strong></p><blockquote><p>common gateway interface ,通用网关接口</p></blockquote></li><li><p><strong>MySQL</strong></p><blockquote><p>PyMySQL 连接数据库 </p></blockquote></li></ul><p>-<strong>网络编程</strong></p><blockquote><p>Socket 套接字<br>Socket serve<br>Python Internet模块</p></blockquote><p>-<strong>XML解析</strong><br>extensible Markup Language 可扩展标记语言</p><p>-<strong>JSON数据解析</strong></p><blockquote><p>json.dumps():对数据进行编码。<br>json.loads():对数掘进行解码。</p></blockquote><p>持续更新新体会和内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Python3&quot;&gt;&lt;a href=&quot;#关于Python3&quot; class=&quot;headerlink&quot; title=&quot;关于Python3&quot;&gt;&lt;/a&gt;关于Python3&lt;/h2&gt;&lt;p&gt;选择Python初衷是迎接人工智能和大数据时代，避免成为新世纪的文盲。我觉得懂一点编
      
    
    </summary>
    
    
      <category term="PYTHON" scheme="http://yoursite.com/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Markdown文本写作</title>
    <link href="http://yoursite.com/2018/07/14/Markdown%E6%96%87%E6%9C%AC%E5%86%99%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/07/14/Markdown文本写作/</id>
    <published>2018-07-14T08:56:51.000Z</published>
    <updated>2018-07-15T09:25:45.837Z</updated>
    
    <content type="html"><![CDATA[<p>通过HEXO第一次接触到了<a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown</a>。给人的第一感觉是很简单，整个版面看上去比较清爽，是我想要的feel。<br>Markdown 可以通过简单、易读易写的文本格式生成结构化的HTML文档，应用广泛。基于HTML的语法可以完全用在Markdown中，当然大部分时候我们更需要用Markdown针对书写的边便捷用法，这里做一个总结。</p><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p>1.标题</p><blockquote><p>在句首插入#表示标题，有六种标题。也就是最多可以有6个#号表示最小字号的标题</p></blockquote><p>2.列表</p><blockquote><p>有序列表 数字加英文的点 如 1. 2. 3.<br>无序列表 *+- 这三个任意一种后面文本接空格 </p></blockquote><p>3.引用块</p><blockquote><p>在引用块的句首加&gt;<br>嵌套引用需要缩进 比如第一次嵌套用&gt;&gt;</p></blockquote><p>4.代码块</p><blockquote><p>使用 ``` 进行代码块引用   这里可以接对应的代码语言名Markdown会自行使用对应的背景渲染。<br>行内引用 可以用两个`` 夹住句子</p></blockquote><p>5.链接<br><code>超链接 \[A](网址 &quot;optional title&quot;)</code></p><blockquote><p><code>图片链接 \![A](网址/地址 )</code>  地址也可以用本地路径，可以在makdown文件夹建一个picture文件夹，optional title的鼠标悬停图片上会显示，可不写。</p></blockquote><p>6.强调</p><blockquote><p>在字两边加一个*为<em>斜体</em></p></blockquote><blockquote><p>在字两边加两个**为<strong>粗体</strong></p></blockquote><blockquote><p>在字两边加三个***为<strong><em>粗斜体</em></strong>    记得不要有与字不要有空格</p></blockquote><p>7.分割线</p><blockquote><p>连续三个或以上星号或下划线或减号 都可以生成一个分割线如下</p></blockquote><hr><p>8.反斜杠</p><blockquote><p>Markdown 支持将大部分符号前面加上反斜杠来帮助插入普通的符号</p></blockquote><p>9.居中居右居左</p><blockquote><p>居中<code>&lt;center&gt;文本&lt;/center&gt;</code><br>居右<code>&lt;p align=&quot;right&quot;&gt;文本&lt;/p&gt;</code><br>居左<code>&lt;p align=&quot;left&quot;&gt;文本&lt;/p&gt;</code></p></blockquote><p>10.换行<br><code>&lt;/br&gt;</code>或两个或以上空格</p><h2 id="进阶语法"><a href="#进阶语法" class="headerlink" title="进阶语法"></a>进阶语法</h2><p>1.表格</p><blockquote><p>使用<code>|</code>分隔不同的单元格，使用<code>-</code>分隔表头与其它行<br>右对齐<code>------:</code> ，左对齐 <code>:------</code>居中对齐<code>---:---</code>，默认居中对齐<code>------</code><br>示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日期 |天气 | 心情  </span><br><span class="line">:-- | -:- |---:B | A | C</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">日期</th><th>天气</th><th style="text-align:right">心情  </th></tr></thead><tbody><tr><td style="text-align:left">B</td><td>A</td><td style="text-align:right">C</td></tr></tbody></table><p><strong>注意</strong>：这里有个坑，我试了很多次才找出来。<code>：</code>冒号一定要在英文状态下打，不然识别不了。然后<code>-</code>数量不限定，可以一个也可以多个。</p><p>2.图表   </p><blockquote><p>图表有更多代码。参考<a href="https://xiaozhuanlan.com/topic/3758460291" target="_blank" rel="noopener">这里</a><br>这种用的少，需要用的时候可以再来调取用法。</p></blockquote><p>3.字体字号和颜色</p><p><code>&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</code><br><code>&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</code><br><code>&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</code><br><code>&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</code><br><code>&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</code><br><code>&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</code></p><p>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3 。颜色是按<a href="http://www.w3school.com.cn/cssref/css_colorsfull.asp" target="_blank" rel="noopener">十六进制颜色值</a>来的。常用的红色（#FF0000）金色（#FFD700）黄色（#FFFF00）</p><p>4.图片居中</p><blockquote><p>居中，在图片引用上一栏加 <code>&lt;div alighn=center&gt;</code> </p></blockquote><blockquote><p>改变图片大小<code>&lt;img src=&quot;./xxx.png 路径&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot; /&gt;</code>    可能会导致图变形，用的少</p></blockquote><p>5.待办事宜</p><blockquote><p>横框+空格+方括号+空格+文本 通过方括号内加入X来区别已办未办，注意方括号也要有空格。</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 爬山</li><li>[X] 走向人生巅峰<ul><li>[X] K歌</li></ul></li></ul><h2 id="冷门用法"><a href="#冷门用法" class="headerlink" title="冷门用法"></a>冷门用法</h2><p>1.删除线</p><blockquote><p>使用 ~~ 将要删除文字夹起来。表示删除</p></blockquote><p><del>HAPPYDAY</del> </p><p>2.注脚 </p><blockquote><p>使用 [^footer] 表示注脚，注意一个引用要写两次。如下 </p><blockquote><p><code>玫瑰是什么颜色[^footer1]</code><br><code>[^footer1]: 玫瑰是红的</code>。</p></blockquote></blockquote><p>玫瑰是什么颜色[^footer1]<br>[^footer1]: 玫瑰是红的。 </p><p>3.页内跳转</p><blockquote><p>使用html代码实现页内跳转。在要跳转到的位置定义个锚<code>&lt;span id = &quot;jump&quot;&gt;World&lt;/span&gt;</code>，然后使用<code>[HELLO](#jump)</code>将你好设置为一单击即跳转到WORLD所在位置的效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HELLO](#jump)  </span><br><span class="line">&lt;span id = &quot;jump&quot;&gt;World&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><a href="#jump">HELLO</a><br><span id="jump">World</span></p><p>4.LateX公式</p><blockquote><p>行内公式：使用两个”$”符号引用公式: $公式$<br>行间公式：使用两对“$$”符号引用公式： $$公式$$<br>这个其实挺复杂，参考<a href="https://www.cnblogs.com/nowgood/p/Latexstart.html" target="_blank" rel="noopener">这里</a>。</p></blockquote><p>5.首行缩进</p><blockquote><p>半方大的空白<code>&amp;ensp;或&amp;#8194;</code>【常用】<br>全方大的空白<code>&amp;emsp;或&amp;#8195;</code><br>不断行的空白格<code>&amp;nbsp;或&amp;#160;</code> </p></blockquote><p>间距如下：<br>&ensp;AAA<br>&emsp;AAA<br>&nbsp;AAA</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本用法能解决大部分情景，高阶用法一般和HTML语法整合的多，但是用的少。如果想更好的进阶可以学习一下HTML语法。一个原则，常用的要能熟练内化为自己的潜意识，少用的要收录起来需要时可以最短时间内调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过HEXO第一次接触到了&lt;a href=&quot;http://www.markdown.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;。给人的第一感觉是很简单，整个版面看上去比较清爽，是我想要的feel。&lt;br&gt;Markdown
      
    
    </summary>
    
    
      <category term="MARKDOWN" scheme="http://yoursite.com/tags/MARKDOWN/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo部署到Github建立极简博客</title>
    <link href="http://yoursite.com/2018/07/13/%E7%94%A8Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%BB%BA%E7%AB%8B%E6%9E%81%E7%AE%80%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/07/13/用Hexo部署到Github建立极简博客/</id>
    <published>2018-07-13T08:10:50.000Z</published>
    <updated>2018-07-15T09:07:16.832Z</updated>
    
    <content type="html"><![CDATA[<p>通过HEXO迅速搭建属于自己的博客是一件很开心很有价值的事情。开心在于，自己可以按喜好定制界面风格，价值在于拥有了一个可以输出的地方。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>是目前很流行的博客框架，我选择了它。对应的同类可能还有很多如Jekyll(ruby)，Pelican(python)，Hexo(javascript)。各有各的好，但缘分这东西谁说的准。<br><a href="https:/nodejs.org" target="_blank" rel="noopener">Nodejs</a>是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它的npm是全球最大的开源库生态系统。第一次见，好厉害的样子。<br><a href="https:/git-scm.com" target="_blank" rel="noopener">Git</a>是目前世界上最先进的分布式版本控制系统（没有之一），对应的是集中式版本控制系统 （CSV、SVN)。<br>上面三个东西就是需要我们安装到本地的基础三件套。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Windows: Download &amp; install <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></p><h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><p>先安装<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm</a>，这是Nodejs版本管理器。也可参考<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">RUNOOB.COM</a>的安装。</p><blockquote><p>$ brew install node<br>通过 node –version 和 npm –version 检查是否安装成功。</p></blockquote><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>上面的环境匹配好后，安装Hexo就是一句话的事~</p><blockquote><p>$ npm install hexo-cli -g</p></blockquote><h2 id="操作Hexo完成博客创建"><a href="#操作Hexo完成博客创建" class="headerlink" title="操作Hexo完成博客创建"></a>操作Hexo完成博客创建</h2><p>这里要用到一些基本的<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">指令</a>最常用的就有下面这些<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder] <span class="comment">#新建网站</span></span><br><span class="line">$ hexo g <span class="comment">#生成generate静态文件</span></span><br><span class="line">$ hexo s <span class="comment">#启动服务器。可以进行预览 http://localhost:4000/ </span></span><br><span class="line">$ hexo d <span class="comment">#部署deploy网站</span></span><br><span class="line">$ hexo clean <span class="comment">#清除缓存文件和静态文件 可以理解为修改后刷新一下</span></span><br><span class="line">$ hexo new [postname] <span class="comment">#生成新的博客文件</span></span><br></pre></td></tr></table></figure></p><p>1.新建myblog文件夹<br>正式开始，打开Gitbash窗口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ npm install</span><br><span class="line">$ npm g</span><br><span class="line">$ npm s</span><br></pre></td></tr></table></figure></p><p>Surprise，surprise，你已经成功的在本地创建了一个你的博客文件夹。同时会生成一个以landscap主题的静态文件页面，可以通过 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 进行访问。<br>2.找中意的Hexo主题并使用它<br>这里最经典的是next<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>，极简风。Hexo库里面有很多很赞的风格供选择。由于next选择的人多，所以对应的个性化配置教程也会更多些，前期作为熟悉基本操作也建议使用这个，后面对于很多地方理解透了再自由发挥。<br>找到中意的theme后，点击进入github找到对应的网址如：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> 然后运行clone指令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.comiissnan/hexo-theme-next themes/next <span class="comment">#下载next主题到本地</span></span><br></pre></td></tr></table></figure></p><p>3.创建github属于你的repository<br>注册一个属于你的github帐号，这里按正常流程走下来就ok。然后创建一个自己的仓库，可以参考官方的帮助文档[creating a new repository]（<a href="https://help.github.com/articles/creating-a-new-repository/）" target="_blank" rel="noopener">https://help.github.com/articles/creating-a-new-repository/）</a> 。这里需要注意的是Repository name 要和Owner的名字一样并且以特定的格式来 如 username.github.io 。以我的为例就是 <code>https://github.com/CarlosPython/CarlosPython.github.io</code>。<br>4.简单修改站点配置文件<br>myblog文件夹中有两个<code>_config.yaml</code>文件，这里需要做一下区分，官方将根目录中的叫做站点配置文件，them主题目录下的叫做主题配置文件。到这里我们需要找到根目录下站点配置文件<code>myblog/_config.yaml</code> 修改一些东西。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">title: Minimalist</span><br><span class="line">subtitle: </span><br><span class="line">description:</span><br><span class="line">authour: CarlosChen</span><br><span class="line">language: en <span class="comment">#也可以用中文的zh-Hans</span></span><br><span class="line">timezone: </span><br><span class="line">------</span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next    <span class="comment">#这里改为下载好的主题名</span></span><br><span class="line">-----</span><br><span class="line">deploy:   <span class="comment">#最底部</span></span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: https://github.com/CarlosPython/CarlosPython.github.io.git <span class="comment">#很重要不要弄错了</span></span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></p><p>基本设置完成后，就可以用 <code>$ hexo s</code>在<a href="http://localhost:4000/预览一下改动后的效果了。针对主题的一些细节优化升级可以后面再处理。" target="_blank" rel="noopener">http://localhost:4000/预览一下改动后的效果了。针对主题的一些细节优化升级可以后面再处理。</a><br>5.布署博客到github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -s hexo-deployer-git  <span class="comment">#安装hexo-deploy-git</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>期间第一次用，会需要验证登陆git，照常登陆就OK。此时刷新一下，就可以看到你的博客在git域名了，比如我的https：//CarlosPython.github.io<br>6.创建一个博客文章试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new postname <span class="comment">#创建以postname为名的.md文件</span></span><br></pre></td></tr></table></figure></p><p>用Markdown编辑器就可以写博客了，我用的是sublime 3。<br>最后上传到git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><h2 id="可能会遇到的问题解决"><a href="#可能会遇到的问题解决" class="headerlink" title="可能会遇到的问题解决"></a>可能会遇到的问题解决</h2><p>1.<code>$ hexo s</code>预览时提示4000端口被占用。我是直接退出gitbash再开就ok了，网上说要改端口什么的觉得麻烦。<br>2.中文title 显示乱码。语言改为中文的对应格式<br>3.无法Ping通Github。Push的时候报错如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u orgin master</span><br><span class="line">ssh: Could not resolve hosname github.com:Temporary fail <span class="keyword">in</span> name resolution</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights </span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></p><p>解决： ctrl+r输入cmd调出命令提示符，ping一下github.com。 会显示 Ping <code>请求找不到主机github.com。请检查该名称，然后重试。</code>这个时候需要在host文件作个修改</p><blockquote><p>hosts文件路径：  C:\Windows\System32\drivers\etc<br>右键-属性-安全-编辑，选中当前电脑登录的用户，给自己最高权限，确认。用记事本打开后在最后一行加：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.30.253.113    github.com</span><br><span class="line">192.30.252.131 github.com</span><br><span class="line">185.31.16.185 github.global.ssl.fastly.net</span><br><span class="line">74.125.237.1 dl-ssl.google.com</span><br><span class="line">173.194.127.200 groups.google.com</span><br><span class="line">192.30.252.131 github.com</span><br><span class="line">185.31.16.185 github.global.ssl.fastly.net</span><br><span class="line">74.125.128.95 ajax.googleapis.com</span><br></pre></td></tr></table></figure><p>保存，然后再ping,发现就有数据了。</p><p>3.其它的不知道什么鬼的。直接删除文件夹从来，有点粗暴但很管用，很多时候刚用修改或执行一些步骤理解不到位就会报错，试了几次没法就直接重来一次。</p><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><ul><li>Hexo主题优化进阶</li><li>Github绑定自己的域名</li><li><a href="https://carlospython.github.io/2018/07/14/Markdown%E6%96%87%E6%9C%AC%E5%86%99%E4%BD%9C/" target="_blank" rel="noopener">Markdown文本写作</a></li></ul><h2 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h2><p>Happy posting!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过HEXO迅速搭建属于自己的博客是一件很开心很有价值的事情。开心在于，自己可以按喜好定制界面风格，价值在于拥有了一个可以输出的地方。&lt;/p&gt;
&lt;h2 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/13/hello-world/"/>
    <id>http://yoursite.com/2018/07/13/hello-world/</id>
    <published>2018-07-13T04:26:17.847Z</published>
    <updated>2018-07-14T07:43:35.024Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
